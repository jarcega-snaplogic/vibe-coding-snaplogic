#!/bin/bash
# Universal SnapLogic Pipeline Validation Hook Installer
# Installs pre-commit hooks in any SnapLogic repository

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "üîß SnapLogic Pipeline Validation Hook Installer"
echo "============================================="

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Error: Not in a git repository${NC}"
    echo "Please run this installer from the root of a git repository."
    exit 1
fi

GIT_HOOKS_DIR="$(git rev-parse --git-dir)/hooks"
echo "üìÅ Git hooks directory: $GIT_HOOKS_DIR"

# Check if hooks already exist
if [[ -f "$GIT_HOOKS_DIR/pre-commit" ]]; then
    echo -e "${YELLOW}‚ö† Pre-commit hook already exists${NC}"
    read -p "Overwrite existing hook? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Installation cancelled."
        exit 0
    fi
fi

echo "üìã Installing validation hooks..."

# Create pre-commit hook
cat > "$GIT_HOOKS_DIR/pre-commit" << 'EOF'
#!/bin/bash
# SnapLogic Pipeline Validation Hook
# Auto-generated by vibe-coding-snaplogic installer

# Get list of .slp files being committed
changed_slp_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.slp$')

# Exit early if no .slp files changed
if [ -z "$changed_slp_files" ]; then
    exit 0
fi

# Get the directory where this script is located
HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Fast validation loop
for file in $changed_slp_files; do
    # Skip if file doesn't exist (deleted files)
    if [ ! -f "$file" ]; then
        continue
    fi
    
    # 1. JSON syntax validation (fastest check first)
    if ! python3 -m json.tool "$file" >/dev/null 2>&1; then
        echo "‚ùå JSON syntax error in: $file"
        echo "   Run: python3 -m json.tool $file"
        exit 1
    fi
    
    # 2. SnapLogic structure validation (if AWK script available)
    if [ -f "$HOOK_DIR/validate_structure.awk" ]; then
        if ! awk -f "$HOOK_DIR/validate_structure.awk" "$file" 2>/dev/null; then
            echo "‚ùå SnapLogic structure error in: $file"
            echo "   $(awk -f "$HOOK_DIR/validate_structure.awk" "$file" 2>&1)"
            exit 1
        fi
    fi
done

# Silent success for performance
exit 0
EOF

# Copy AWK validation script if it exists
if [[ -f "$SCRIPT_DIR/validate_structure.awk" ]]; then
    cp "$SCRIPT_DIR/validate_structure.awk" "$GIT_HOOKS_DIR/"
    chmod +x "$GIT_HOOKS_DIR/validate_structure.awk"
    echo "‚úÖ Copied AWK validation script"
else
    echo -e "${YELLOW}‚ö† AWK validation script not found - using basic validation only${NC}"
fi

# Make hook executable
chmod +x "$GIT_HOOKS_DIR/pre-commit"

echo -e "${GREEN}‚úÖ Hooks installed successfully!${NC}"
echo ""
echo "üìù What happens now:"
echo "  ‚Ä¢ Pre-commit hook validates .slp files automatically"
echo "  ‚Ä¢ Invalid files will be rejected with helpful error messages"
echo "  ‚Ä¢ Emergency override: git commit --no-verify"
echo ""

# Test installation with existing .slp files
slp_files=$(find . -name "*.slp" -type f | head -3)
if [ -n "$slp_files" ]; then
    echo "üß™ Testing hook installation..."
    if "$GIT_HOOKS_DIR/pre-commit"; then
        echo -e "${GREEN}‚úÖ Hook test passed!${NC}"
    else
        echo -e "${RED}‚ùå Hook test failed${NC}"
        echo "   Please check your existing .slp files for validation errors"
        exit 1
    fi
else
    echo "üìÑ No .slp files found to test, but installation completed successfully"
fi

echo ""
echo -e "${GREEN}üéâ Installation complete!${NC}"
echo "Your SnapLogic pipelines are now protected by validation hooks."